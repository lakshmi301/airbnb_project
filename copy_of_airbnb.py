# -*- coding: utf-8 -*-
"""Copy of airbnb.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KCU9vMPM9NIv0mJs3USQiXLk95KHE-FG

# Airbnb NYC Analysis & Dashboard

**Objective:** Analyze Airbnb listings in NYC to extract pricing trends, seasonal insights, and geospatial patterns, and provide actionable recommendations for hosts and investors.

**Tools Used:** Python, pandas, seaborn, matplotlib, plotly, folium, scikit-learn
"""

#1
!pip install folium plotly geopandas scikit-learn --quiet

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import folium
from folium.plugins import MarkerCluster
from IPython.display import display
import plotly.express as px
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

sns.set_style('whitegrid')

#2
from google.colab import files
uploaded = files.upload()  # Upload AB_NYC_2019.csv here

df = pd.read_csv("AB_NYC_2019.csv")
df.head()

#3
df.info()
df.describe()
df.isnull().sum()

#4
# Fill missing reviews_per_month safely
df['reviews_per_month'] = df['reviews_per_month'].fillna(0)

# Remove unrealistic prices
df = df[(df['price'] > 0) & (df['price'] < 1000)]
df = df.reset_index(drop=True)

#5
# Price per review
df['price_per_review'] = df['price'] / (df['number_of_reviews'] + 1)

# Active listings
df['active_listing'] = df['number_of_reviews'] > df['number_of_reviews'].median()

# Price vs neighborhood average
neighborhood_avg = df.groupby('neighbourhood')['price'].mean().to_dict()
df['price_vs_neighborhood'] = df['price'] / df['neighbourhood'].map(neighborhood_avg)

#6
plt.figure(figsize=(10,6))
sns.histplot(df['price'], bins=50, kde=True, color='purple')
plt.title('Price Distribution')
plt.xlabel('Price ($)')
plt.show()

plt.figure(figsize=(7,5))
sns.countplot(data=df, x='room_type', palette='Set2')
plt.title('Room Type Distribution')
plt.show()

#7
plt.figure(figsize=(10,6))
sns.boxplot(x='room_type', y='price', data=df, palette='coolwarm')
plt.title('Price Distribution by Room Type')
plt.ylim(0, 1000)
plt.show()

plt.figure(figsize=(10,6))
sns.boxplot(x='neighbourhood_group', y='price', data=df, palette='Set3')
plt.title('Price Distribution by Neighborhood Group')
plt.ylim(0, 1000)
plt.show()

#8
df['last_review'] = pd.to_datetime(df['last_review'], errors='coerce')
df['review_month'] = df['last_review'].dt.month
df['review_year'] = df['last_review'].dt.year

monthly_reviews = df.groupby(['review_year','review_month']).size().unstack()
plt.figure(figsize=(12,6))
sns.heatmap(monthly_reviews.fillna(0), cmap='YlGnBu', annot=True, fmt=".0f")
plt.title('Number of Reviews per Month')
plt.ylabel('Year')
plt.xlabel('Month')
plt.show()

#9
features = df[['room_type','neighbourhood_group','minimum_nights','number_of_reviews']]
target = df['price']

X = pd.get_dummies(features, drop_first=True)
y = target

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse:.2f}")

plt.figure(figsize=(8,6))
plt.scatter(y_test, y_pred, alpha=0.5, color='purple')
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.title('Actual vs Predicted Price')
plt.show()

#11
fig1 = px.scatter(df, x='number_of_reviews', y='price', color='room_type',
                  hover_data=['name','neighbourhood'], title="Price vs Number of Reviews (Room Type)", log_y=True)
fig1.show()

top_neigh = df.groupby('neighbourhood')['price'].mean().sort_values(ascending=False).head(10)
fig2 = px.bar(top_neigh, title="Top 10 Most Expensive Neighborhoods",
              labels={'value':'Average Price','neighbourhood':'Neighborhood'}, color=top_neigh.values, color_continuous_scale='Viridis')
fig2.show()

#12
avg_price = df['price'].mean()
max_price = df['price'].max()
min_price = df['price'].min()
most_common_room = df['room_type'].mode()[0]
most_exp_neigh = df.groupby('neighbourhood')['price'].mean().idxmax()
total_listings = df.shape[0]

# Display KPIs
from IPython.display import HTML
kpi_html = f"""
<div style='display:flex; justify-content: space-between; margin-bottom:20px;'>
    <div style='padding:10px; background:#e0f7fa; border-radius:5px; text-align:center; width:16%'>
        <h4>Average Price</h4><h3>${avg_price:.2f}</h3></div>
    <div style='padding:10px; background:#ffe0b2; border-radius:5px; text-align:center; width:16%'>
        <h4>Maximum Price</h4><h3>${max_price}</h3></div>
    <div style='padding:10px; background:#ffcdd2; border-radius:5px; text-align:center; width:16%'>
        <h4>Minimum Price</h4><h3>${min_price}</h3></div>
    <div style='padding:10px; background:#d1c4e9; border-radius:5px; text-align:center; width:16%'>
        <h4>Most Common Room</h4><h3>{most_common_room}</h3></div>
    <div style='padding:10px; background:#c8e6c9; border-radius:5px; text-align:center; width:16%'>
        <h4>Most Expensive Neighborhood</h4><h3>{most_exp_neigh}</h3></div>
    <div style='padding:10px; background:#f0f4c3; border-radius:5px; text-align:center; width:16%'>
        <h4>Total Listings</h4><h3>{total_listings}</h3></div>
</div>
"""
display(HTML(kpi_html))









